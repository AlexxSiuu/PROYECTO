// deploy.js - Script Node.js para deploy autom√°tico
// npm install ftp-deploy git-diff

const FtpDeploy = require('ftp-deploy');
const { execSync } = require('child_process');

// Configuraci√≥n
const config = {
    user: "tu_usuario_ftp",
    password: "tu_contrase√±a_ftp", 
    host: "ftpupload.net", // Tu servidor FTP de InfinityFree
    port: 21,
    localRoot: __dirname,
    remoteRoot: "/htdocs/",
    include: ["", "/"],
    exclude: [
        "node_modules/**",
        ".git/**",
        ".github/**",
        "*.md",
        "deploy.js",
        "package*.json"
    ],
    deleteRemote: false,
    forcePasv: true
};

async function deployToInfinityFree() {
    console.log("üöÄ Iniciando deploy...");
    
    try {
        // Verificar si hay cambios
        const status = execSync('git status --porcelain', { encoding: 'utf8' });
        if (status.trim() === '') {
            console.log("üìù Haciendo git pull para obtener √∫ltimos cambios...");
            execSync('git pull origin main');
        }
        
        // Deploy via FTP
        const ftpDeploy = new FtpDeploy();
        
        ftpDeploy.on('uploading', function(data) {
            console.log(üì§ Subiendo: ${data.filename});
        });
        
        ftpDeploy.on('uploaded', function(data) {
            console.log(‚úÖ Subido: ${data.filename});
        });
        
        await ftpDeploy.deploy(config);
        console.log("üéâ Deploy completado exitosamente!");
        
    } catch (err) {
        console.error("‚ùå Error en deploy:", err.message);
    }
}

// Funci√≥n para watch de archivos (opcional)
function watchAndDeploy() {
    const fs = require('fs');
    const path = require('path');
    
    console.log("üëÄ Monitoreando cambios en archivos...");
    
    fs.watch(__dirname, { recursive: true }, (eventType, filename) => {
        if (filename && !filename.includes('node_modules') && !filename.includes('.git')) {
            console.log(üìù Archivo modificado: ${filename});
            console.log("‚è≥ Deploy en 3 segundos...");
            
            setTimeout(() => {
                deployToInfinityFree();
            }, 3000);
        }
    });
}

// Ejecutar seg√∫n argumento
const command = process.argv[2];

if (command === 'watch') {
    watchAndDeploy();
} else {
    deployToInfinityFree();
}

// Uso:
// node deploy.js          -> Deploy una vez
// node deploy.js watch    -> Monitorea cambios y deploy autom√°tico